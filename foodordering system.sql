create database food_ordering_system;

-- Drop constraints and tables if they exist
IF OBJECT_ID('FK_FEEDBACK_HASFEEDBA_MEAL', 'F') IS NOT NULL ALTER TABLE FEEDBACK DROP CONSTRAINT FK_FEEDBACK_HASFEEDBA_MEAL;
IF OBJECT_ID('FK_FEEDBACK_WRITES_CUSTOMER', 'F') IS NOT NULL ALTER TABLE FEEDBACK DROP CONSTRAINT FK_FEEDBACK_WRITES_CUSTOMER;
IF OBJECT_ID('FK_MEAL_CONTAIN_CATEGORY', 'F') IS NOT NULL ALTER TABLE MEAL DROP CONSTRAINT FK_MEAL_CONTAIN_CATEGORY;
IF OBJECT_ID('FK_ORDER_PLACES_CUSTOMER', 'F') IS NOT NULL ALTER TABLE [ORDER] DROP CONSTRAINT FK_ORDER_PLACES_CUSTOMER;
IF OBJECT_ID('FK_ORDERDET_CONTAINS_ORDER', 'F') IS NOT NULL ALTER TABLE ORDERDETAILS DROP CONSTRAINT FK_ORDERDET_CONTAINS_ORDER;
IF OBJECT_ID('FK_ORDERDET_IN_MEAL', 'F') IS NOT NULL ALTER TABLE ORDERDETAILS DROP CONSTRAINT FK_ORDERDET_IN_MEAL;
IF OBJECT_ID('FK_PHONE_CU_HAS_CUSTOMER', 'F') IS NOT NULL ALTER TABLE PHONE_CUSTOMER DROP CONSTRAINT FK_PHONE_CU_HAS_CUSTOMER;

DROP TABLE IF EXISTS ADMIN;
DROP TABLE IF EXISTS CATEGORY;
DROP TABLE IF EXISTS CUSTOMER;
DROP TABLE IF EXISTS FEEDBACK;
DROP TABLE IF EXISTS MEAL;
DROP TABLE IF EXISTS [ORDER];
DROP TABLE IF EXISTS ORDERDETAILS;
DROP TABLE IF EXISTS PHONE_CUSTOMER;
GO

CREATE TABLE ADMIN (
   ADMINID INT NOT NULL PRIMARY KEY,
   NAME VARCHAR(50) NOT NULL,
   EMAIL VARCHAR(100) NOT NULL,
   PASSWORD VARCHAR(100) NOT NULL
);
GO

CREATE TABLE CATEGORY (
   CATEGORYID INT NOT NULL PRIMARY KEY,
   NAME VARCHAR(50) NOT NULL
);
GO

CREATE TABLE CUSTOMER (
   _CUSTOMERID INT NOT NULL PRIMARY KEY,
   FNAME VARCHAR(20) NOT NULL,
   LNAME VARCHAR(20) NOT NULL,
   EMAIL VARCHAR(100) NOT NULL,
   PASSWORD VARCHAR(100) NOT NULL,
   ADDRESS VARCHAR(200)
);
GO

CREATE TABLE MEAL (
   MEALID INT NOT NULL PRIMARY KEY,
   CATEGORYID INT NOT NULL,
   NAME VARCHAR(50) NOT NULL,
   DESCRIPTION VARCHAR(MAX) NOT NULL,
   PRICE DECIMAL(10,2) NOT NULL
);
GO

CREATE TABLE [ORDER] (
   ORDERID INT NOT NULL PRIMARY KEY,
   _CUSTOMERID INT NOT NULL,
   TOTALPRICE DECIMAL(10,2) NOT NULL,
   ORDERDATE DATE NOT NULL,
   VAT DECIMAL(10,2),
   PAYMENTMETHOD VARCHAR(20),
   DISCOUNTCODE VARCHAR(20)
);
GO

CREATE TABLE ORDERDETAILS (
   ORDERID INT NOT NULL,
   MEALID INT NOT NULL,
   QUANTITY INT NOT NULL,
   PRICE_UNIT DECIMAL NOT NULL,
   PRIMARY KEY (ORDERID, MEALID)
);
GO

CREATE TABLE FEEDBACK (
   FEEDBACKID INT NOT NULL PRIMARY KEY,
   MEALID INT NOT NULL,
   _CUSTOMERID INT NOT NULL,
   RATING INT NOT NULL,
   [COMMENT] VARCHAR(MAX) NOT NULL
);
GO

CREATE TABLE PHONE_CUSTOMER (
   PHONE VARCHAR(20) NOT NULL,
   CUSTOMER_ID INT NOT NULL,
   _CUSTOMERID INT NOT NULL,
   PRIMARY KEY (PHONE, CUSTOMER_ID)
);
GO


ALTER TABLE FEEDBACK ADD CONSTRAINT FK_FEEDBACK_HASFEEDBA_MEAL FOREIGN KEY (MEALID) REFERENCES MEAL(MEALID);
ALTER TABLE FEEDBACK ADD CONSTRAINT FK_FEEDBACK_WRITES_CUSTOMER FOREIGN KEY (_CUSTOMERID) REFERENCES CUSTOMER(_CUSTOMERID);
ALTER TABLE MEAL ADD CONSTRAINT FK_MEAL_CONTAIN_CATEGORY FOREIGN KEY (CATEGORYID) REFERENCES CATEGORY(CATEGORYID);
ALTER TABLE [ORDER] ADD CONSTRAINT FK_ORDER_PLACES_CUSTOMER FOREIGN KEY (_CUSTOMERID) REFERENCES CUSTOMER(_CUSTOMERID);
ALTER TABLE ORDERDETAILS ADD CONSTRAINT FK_ORDERDET_CONTAINS_ORDER FOREIGN KEY (ORDERID) REFERENCES [ORDER](ORDERID);
ALTER TABLE ORDERDETAILS ADD CONSTRAINT FK_ORDERDET_IN_MEAL FOREIGN KEY (MEALID) REFERENCES MEAL(MEALID);
ALTER TABLE PHONE_CUSTOMER ADD CONSTRAINT FK_PHONE_CU_HAS_CUSTOMER FOREIGN KEY (_CUSTOMERID) REFERENCES CUSTOMER(_CUSTOMERID);
GO




-- Insert Admins
INSERT INTO ADMIN (ADMINID, NAME, EMAIL, PASSWORD) VALUES
(1, 'Admin One', 'admin1@example.com', 'adminpass1');

-- Insert Categories
INSERT INTO CATEGORY (CATEGORYID, NAME) VALUES
(1, 'Pizza'),
(2, 'Drinks'),
(3, 'Dessert'),
(4, 'sandwich');

-- Sign up a new customer (by customer or admin)
INSERT INTO CUSTOMER (_CUSTOMERID, FNAME, LNAME, EMAIL, PASSWORD, ADDRESS) VALUES
(1, 'ali', 'saleh', 'ali@gmail.com', 'password1', '123 Street'),
(2, 'zeyad', 'Samir', 'zeyad@gmail.com', '333eweee', '6 october'),
(3, 'mahmoud', 'esam', 'mahmoud@gmail.com', 'qw2222223', '15 may'),
(5, 'hassan', 'tarek', 'hassan@gmail.com', '12345rfe', '15 may'),
(6, 'omar', 'tarek', 'omar@gmail.com', '12345rfe', '15 may');


-- remove customer (by admin/customer)
delete from CUSTOMER
where _CUSTOMERID =5;

-- Add/delete meal (by Admin)
INSERT INTO MEAL (MEALID, CATEGORYID, NAME, DESCRIPTION, PRICE) VALUES
(1, 1, 'Pepperoni Pizza', 'Spicy pizza with pepperoni', 120.00),
(2, 2, 'Coke', 'Cold drink', 20.00),
(3, 3, 'Chocolate Cake', 'Rich chocolate dessert', 55.00),
(4, 4, 'burger sandwich', 'Rich chocolate dessert', 95.00),
(5, 1, 'Pizza Margherita', 'Classic cheese and tomato pizza', 80.00),
(6, 1, 'Chicken BBQ Pizza', 'Pizza with grilled chicken and BBQ sauce', 110.00),
(7, 2, 'Orange Juice', 'Freshly squeezed orange juice', 25.00),
(8, 3, 'Ice Cream Sundae', 'Vanilla ice cream with chocolate syrup', 30.00);


-- Update meal details (by admin)
Update MEAL 
set DESCRIPTION='extra cheese and tomato pizza',PRICE=90
where MEALID=5;


-- delete meal
delete from MEAL
where MEALID = 6;


-- Book Orders
INSERT INTO [ORDER] (ORDERID, _CUSTOMERID, TOTALPRICE, ORDERDATE, VAT, PAYMENTMETHOD, DISCOUNTCODE) VALUES
(101, 1, 160.00, '2025-03-20', 10.00, 'Card', 'DISC10'),
(102, 2, 60.00, '2025-04-05', 5.00, 'Cash', NULL),
(103, 3, 95.00, '2025-05-05', 7.00, 'Cash', NULL),
(104, 3, 95.00, '2025-01-07', 7.00, 'Cash', NULL),
(108, 1, 185.00, GETDATE(), 5.00, 'Card', 'DISCOUNT10'),
(109, 2, 150.00, '2025-05-10', 10.00, 'Card', 'DISC20'),
(111, 6, 35.00, '2025-04-10', 5.00, 'Card', NULL);


INSERT INTO ORDERDETAILS (ORDERID, MEALID, QUANTITY, PRICE_UNIT) VALUES
(101, 1, 1, 120.00),
(101, 2, 2, 20.00),
(102, 3, 1, 55.00),
(108, 5, 2, 90.00),
(109, 6, 1, 110.00), 
(109, 7, 2, 25.00),
(111, 8, 1, 30.00);

-- cancle order 
DELETE FROM ORDERDETAILS WHERE ORDERID = 111;
DELETE FROM [ORDER] WHERE ORDERID = 111;


-- add Feedbacks

INSERT INTO FEEDBACK (FEEDBACKID, MEALID, _CUSTOMERID, RATING, [COMMENT]) VALUES
(1, 1, 1, 5, 'Delicious pizza!'),
(2, 3, 2, 4, 'Tasty dessert!'),
(3, 4, 3, 5, 'great!'),
(4, 5, 6, 3, 'normal');

-- Insert Phone Numbers for Customers
INSERT INTO PHONE_CUSTOMER (PHONE, CUSTOMER_ID, _CUSTOMERID) VALUES
('01000000001', 1, 1),
('01000000002', 2, 2),
('01011221143', 3, 3);


-- update a user details

UPDATE CUSTOMER
SET FNAME = 'Ahmed', LNAME = 'Ali', EMAIL = 'ahmed@gmail.com', ADDRESS = 'New cairo'
WHERE _CUSTOMERID = 1;

-- modify feedback
UPDATE FEEDBACK
SET RATING = 4, [COMMENT] = 'Good but could be better'
WHERE FEEDBACKID = 1;
 
-- delete feedback
delete from FEEDBACK
where FEEDBACKID=4;

-- Show menu details (by admin or customer)

SELECT M.MEALID, M.NAME, M.DESCRIPTION, M.PRICE, C.NAME AS CATEGORY
FROM MEAL M
JOIN CATEGORY C ON M.CATEGORYID = C.CATEGORYID
ORDER BY M.NAME;

-- Search Meals by Name
SELECT * FROM MEAL WHERE NAME LIKE '%Pizza%';

-- Search Meals by Price and Category
SELECT M.*
FROM MEAL M
JOIN CATEGORY C ON M.CATEGORYID = C.CATEGORYID
WHERE M.PRICE < 100 AND C.NAME = 'Dessert';


-- Show Bill of Order
SELECT O.ORDERID, O.ORDERDATE, OD.MEALID, M.NAME, OD.QUANTITY, OD.PRICE_UNIT,
       (OD.QUANTITY * OD.PRICE_UNIT) AS SubTotal, O.VAT, O.TOTALPRICE
FROM [ORDER] O
JOIN ORDERDETAILS OD ON O.ORDERID = OD.ORDERID
JOIN MEAL M ON OD.MEALID = M.MEALID
WHERE O.ORDERID = 101;

--  Order history for each customer
SELECT O.ORDERID, O.ORDERDATE, O.TOTALPRICE
FROM [ORDER] O
WHERE O._CUSTOMERID = 1
ORDER BY O.ORDERDATE DESC;

-- Show Orders per Customer Last 3 Months
SELECT 
    C._CUSTOMERID, 
    C.FNAME, 
    C.LNAME, 
    O.ORDERID,
    O.ORDERDATE,
    O.TOTALPRICE
FROM CUSTOMER C
JOIN [ORDER] O ON C._CUSTOMERID = O._CUSTOMERID
WHERE O.ORDERDATE >= DATEADD(MONTH, -3, GETDATE())
ORDER BY C._CUSTOMERID, O.ORDERDATE;




-- Most Ordered Meal
SELECT TOP 1 M.NAME, SUM(OD.QUANTITY) AS TotalOrders
FROM ORDERDETAILS OD
JOIN MEAL M ON OD.MEALID = M.MEALID
GROUP BY M.NAME
ORDER BY TotalOrders DESC;

-- Meals Not Ordered
SELECT M.MEALID, M.NAME
FROM MEAL M
LEFT JOIN ORDERDETAILS OD ON M.MEALID = OD.MEALID
WHERE OD.MEALID IS NULL;

-- Customer with Highest Order Price This Month
SELECT TOP 1 C.FNAME, C.LNAME, SUM(O.TOTALPRICE) AS TotalSpent
FROM CUSTOMER C
JOIN [ORDER] O ON C._CUSTOMERID = O._CUSTOMERID
WHERE MONTH(O.ORDERDATE) = MONTH(GETDATE()) AND YEAR(O.ORDERDATE) = YEAR(GETDATE())
GROUP BY C.FNAME, C.LNAME
ORDER BY TotalSpent DESC;

-- Meals Ordered More Than 5 Times in Last 2 Months
SELECT M.NAME, SUM(OD.QUANTITY) AS TotalQty
FROM ORDERDETAILS OD
JOIN [ORDER] O ON OD.ORDERID = O.ORDERID
JOIN MEAL M ON OD.MEALID = M.MEALID
WHERE O.ORDERDATE >= DATEADD(MONTH, -2, GETDATE())
GROUP BY M.NAME
HAVING SUM(OD.QUANTITY) > 5;

-- Retrieve Each Customer Info and Number of Orders
SELECT C._CUSTOMERID, C.FNAME, C.LNAME, C.EMAIL, COUNT(O.ORDERID) AS NumberOfOrders
FROM CUSTOMER C
LEFT JOIN [ORDER] O ON C._CUSTOMERID = O._CUSTOMERID
GROUP BY C._CUSTOMERID, C.FNAME, C.LNAME, C.EMAIL;
SELECT * FROM ORDERDETAILS;





